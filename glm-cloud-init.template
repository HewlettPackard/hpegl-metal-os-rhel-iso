#cloud-config
# (C) Copyright 2021-2022, 2024 Hewlett Packard Enterprise Development LP
merge_how:
  - name:     list
    settings: [append]
  - name:     dict
    settings: [no_replace, recurse_list]

hostname: {{ .Name}}
{{- if contains .Name "."}}
fqdn:     {{ .Name }}
{{else}}
fqdn:     {{ .Name }}.localdomain
{{end}}
manage_etc_hosts: true

# setup SSH keys
# ----------------------------------------------------
users:
  - name: root
    # Reference: https://cloudinit.readthedocs.io/en/latest/reference/examples.html
    #   lock_passwd: Defaults to true. Lock the password to disable password login.
    #   Set it to false to unlock the password (for root login at the serial console).
    lock_passwd: false
{{- if .SSHKeys }}
    ssh_authorized_keys:
  {{- range $key := .SSHKeys}}
      - {{$key }}
  {{- end}}
{{end}}

# iscsi, proxy and ntp info
# ----------------------------------------------------
{{- /* extract proxy and ntp info from HostDef struct */}}
{{- $proxy := "" }}
{{- $no_proxy := "" }}
{{- $ntp := ""}}
{{- range .Connections }}
  {{- if gt .UntaggedNet.VID 0 }}
    {{- range .UntaggedNet.Ranges }}
      {{- if  .Proxy }}
        {{- $proxy = .Proxy }}
        {{- $no_proxy = .NoProxy }}
      {{- end}}
      {{- if .NTP}}
        {{- $ntp = .NTP}}
      {{- end}}
    {{- end}}
  {{- end}}
  {{- range .Networks }}
    {{- range .Ranges }}
      {{- if  .Proxy }}
        {{- $proxy = .Proxy }}
        {{- $no_proxy = .NoProxy }}
      {{- end}}
      {{- if .NTP}}
        {{- $ntp = .NTP}}
      {{- end}}
    {{- end}}
  {{- end}}
{{- end}}

# cloud-init module "write_file" is to create a new file or 
#   overwrite an existing file during initialization.
# ----------------------------------------------------
write_files:
    # System Configuration file for node exporter
  - path: /etc/sysconfig/node_exporter
    owner: node_exporter
    permissions: '0644'
    content: |
        ARGS="--web.listen-address=\":45678\""
    # Systemd unit files created by systemctl enable
  - path: /etc/systemd/system/node_exporter.service
    owner: root
    permissions: '0644'
    content: |
        [Unit]
        Description=Node Exporter
        [Service]
        User=node_exporter
        EnvironmentFile=/etc/sysconfig/node_exporter
        ExecStart=/usr/bin/node_exporter $ARGS
        [Install]
        WantedBy=multi-user.target
{{- /* verify the rest of write_files: is needed */}}
{{- if  .InitiatorName}}
    # Set initiator name
  - path: /etc/iscsi/initiatorname.iscsi
    owner: root
    permissions: '0644'
    content: |
      InitiatorName={{.InitiatorName}}
{{- end}}
{{- if  .CHAPSecret}}
    # Set iSCSI target with CHAP authorization
  - path: /etc/iscsi/iscsid.conf
    owner: root
    permissions: '0644'
    content: |
      node.session.auth.authmethod = CHAP
      node.session.auth.username = {{.CHAPUser}}
      node.session.auth.password = {{.CHAPSecret}}
      node.startup = automatic
{{- end}}
{{- if $proxy }}
    # Set proxy settings
  - path: /etc/environment
    owner: root
    permissions: '0644'
    content: |
        http_proxy={{$proxy}}
        https_proxy={{$proxy}}
        no_proxy={{$no_proxy}}
        HTTP_PROXY={{$proxy}}
        HTTPS_PROXY={{$proxy}}
        NO_PROXY={{$no_proxy}}
{{- end}}
    # Writing script for node exporter service; executes under runcmd
  - path: /var/lib/cloud/instance/scripts/glm-node-exporter.sh
    owner: root
    permissions: '0775'
    content: |
      #!/bin/bash
      curl_cmd="curl --silent --location"
    {{- if $proxy }}
      curl_cmd+=" --proxy {{$proxy}}"
    {{- end }}
      echo "$(date '+%Y%m%d-%H:%M:%S') curl_cmd=${curl_cmd}" > /var/log/glm-node-exporter.log
      for try in {1..3} ; do
        download_url=$(${curl_cmd} \
        https://api.github.com/repos/prometheus/node_exporter/releases/latest | grep "browser_download_url.*linux-amd64.tar.gz" | cut -d ':' -f2,3 | tr -d \")
        echo "$(date '+%Y%m%d-%H:%M:%S') download_url=${download_url}" >> /var/log/glm-node-exporter.log
        ${curl_cmd} ${download_url} > node_exporter.tar.gz
        echo "$(date '+%Y%m%d-%H:%M:%S') PNE Source- $(ls -lrt node_exporter.tar.gz)" >> /var/log/glm-node-exporter.log
        tar zxf node_exporter.tar.gz
        if [ -f node_exporter-*/node_exporter ]; then
          mv node_exporter-*/node_exporter /usr/bin
          rm -rf node_exporter*
          chown node_exporter:node_exporter /usr/bin/node_exporter
          chcon -t bin_t /usr/bin/node_exporter
          systemctl daemon-reload
          systemctl enable node_exporter
          systemctl start node_exporter
          break
        fi
        echo "$(date '+%Y%m%d-%H:%M:%S') ERROR failed to download the node exporter source file, attempt $try of 3" >> /var/log/glm-node-exporter.log
      done
    # Writing script for iscsid service; executes under runcmd
  - path: /var/lib/cloud/instance/scripts/glm-iscsid.sh
    owner: root
    permissions: '0775'
    content: |
      #!/bin/bash
      systemctl enable iscsid
      systemctl start iscsid
      echo $(date '+%Y%m%d-%H:%M:%S') $(systemctl status iscsid | grep -i pid) > /var/log/glm-iscsid.log
    {{- if .VolumeAttachments}}
      # iSCSI Volume attachments
      # ----------------------------------------------------
      # This requires host to create with a Volume attached and will
      # setup multipathd to create dm device for it. Once host is up,
      # Metal can add additional volume attachments and user will need
      # to do "iscsiadm -m session --rescan" and new dm device will be created.
    {{- range $da := .ISCSIDiscoveryAddressesV3}}
      iscsiadm --mode discovery -t sendtargets  -p "{{$da }}"
    {{- end}}
    {{- if .ISCSIDiscoveryAddressesV3}}
      iscsiadm --mode node --login
    {{- end}}
    {{- end}}

# network connections
# ----------------------------------------------------
{{ if .Connections}}
network:
  version: 1
  config:
  {{- $vlan_parent := ""}}
  {{- range .Connections}}
  {{- if eq (len .Interfaces) 1}}
    # single interface
    {{- $iface := index .Interfaces 0}}
    - type: physical
      name: {{$iface.Name}}
      mac_address: {{$iface.HWAddr}}
      {{- $vlan_parent = $iface.Name}}
  {{- else}}
    # multiple interfaces that are bonded
    {{- range .Interfaces}}
    - type: physical
      name: {{.Name}}
      mac_address: {{.HWAddr}}
    {{- end}}
    - type: bond
      name: {{.Name}}
      bond_interfaces:
      {{- range .Interfaces}}
      -  {{.Name}}
      {{- end}}
      params:
          # Reference: https://docs.redhat.com/en/documentation/red_hat_enterprise_linux/8/html/configuring_and_managing_networking/configuring-network-bonding_configuring-and-managing-networking#configuring-network-bonding_configuring-and-managing-networking
          # set bonding mode = mode 5 (balance-tlb)
          bond_mode: balance-tlb
          bond-miimon: 100
          bond-xmit_hash_policy: 2
      {{- $vlan_parent = .Name}}
  {{- end}}

  {{- if gt .UntaggedNet.VID 0 }}
      {{- $net_zero := .UntaggedNet }}
      {{- $range_zero := index $net_zero.Ranges 0 }}
      subnets:
      - type: static
        address: {{$range_zero.Base}}/{{$range_zero.CIDR}}
        gateway: {{$range_zero.Gateway}}
        {{- if $range_zero.DNS}}
        dns_nameservers:
          {{- range $range_zero.DNS}}
          - {{.}}
          {{- end}}
        {{- end}}
        {{- if $range_zero.DNSSearchDomains}}
        dns_search:
          {{- range $range_zero.DNSSearchDomains}}
          - {{.}}
          {{- end}}
        {{- end}}
  {{- end }}
  {{- if gt (len .Networks) 0 }}
    # multiple networks with vlans
    {{- range .Networks}}
    - type: vlan
      name: {{$vlan_parent}}.{{.VID}}
      vlan_link:  {{$vlan_parent}}
      vlan_id: {{.VID}}
      {{- $range_zero := index .Ranges 0}}
      subnets:
      - type: static
        address: {{$range_zero.Base}}/{{$range_zero.CIDR}}
        gateway: {{$range_zero.Gateway}}
        {{- if $range_zero.DNS}}
        dns_nameservers:
          {{- range $range_zero.DNS}}
          - {{.}}
          {{- end}}
        {{- end}}
        {{- if $range_zero.DNSSearchDomains}}
        dns_search:
          {{- range $range_zero.DNSSearchDomains}}
          - {{.}}
          {{- end}}
        {{- end}}
      {{- end}}
  {{- end}}
  {{- end}}  {{/* range .Connections  */}}
{{- end}}    {{/* end if .Connections */}}

# NTP server information
# ----------------------------------------------------
{{- if $ntp}}
ntp:
  enabled: true
  servers:
  {{- range $ntp}}
    - {{.}}
  {{- end}}
{{- end}}

# cloud-init module "runcmd" is a configuration option that allows users to run commands during boot.
#   Example: installing software or configuring services.
#   default: none
#   runcmd only runs during the first boot
#   Note: Source path of all script files: "/var/lib/cloud/instance/scripts/<script_files>"
# ----------------------------------------------------
runcmd:
  # Required: write_files
  - if [ ! -f /var/lib/cloud/instance/scripts/glm-node-exporter.sh ] || [ ! -f /var/lib/cloud/instance/scripts/glm-iscsid.sh ]; then
      /usr/bin/cloud-init single -n write_files; fi
  # Script for node exporter service
  - /var/lib/cloud/instance/scripts/glm-node-exporter.sh
  # Script for iscsid service
  - /var/lib/cloud/instance/scripts/glm-iscsid.sh

# cloud-init module "power_state" handles shutdown/reboot
#   after all config modules have been run.
# ----------------------------------------------------
power_state:
  # In some cloud-init-enabled images, a few services may race with cloud-init
  # during boot, causing issues with initial modules. To avoid such issues,
  # reboot the host at the end of a host deployment.
  mode: reboot
  message: Host is rebooting
